--- 
title: A little bit abot Git
layout: post
---
<h2 id="head-433488c1068e480d8348ea844032b5bab036f345"><span style="font-size:130%;">Distributed Nature</span></h2> <span class="anchor" id="line-12"></span><p class="line874">Git was designed from the ground up as a distributed version control system.<span class="anchor" id="line-13"></span><span class="anchor" id="line-14"></span></p><p class="line874">In a distributed version control software like Git every user has a complete copy of the repository data stored locally (a.k.a a local working copy), thereby making access to file history extremely fast, as well as allowing full functionality and access when disconnected from the network. It also means every user has a complete backup of the repository.  If any repository is lost due to system failure only the changes which were unique to that repository are lost. If users frequently <span style="font-weight: bold;">push</span> and <span style="font-weight: bold;">fetch</span> changes with each other this tends to be an incredibly small amount of loss, if any at all. <span class="anchor" id="line-15"></span><span class="anchor" id="line-16"></span></p><p class="line874">In a centralized VCS like Subversion only the central repository has the complete history. This means that users <span style="font-weight: bold;">must communicate over the network</span> with the central repository to obtain older versions for a file, Backups must be maintained independently and if the central repository is lost due to system failure it <span style="font-weight: bold;">must be restored from backup</span> <span style="font-weight: bold;">and all changes since that last backup are likely to be lost</span>. (Depending on the backup policies).<span class="anchor" id="line-17"></span><span class="anchor" id="line-18"></span></p><h2 id="head-e9f3670dbe08ee4d393098cdf883c42a2c2396ae"><span style="font-size:130%;">Access Control</span></h2> <span class="anchor" id="line-21"></span><p class="line874">Due to being distributed, you inherently do not have to give commit access to other people. Instead, you decide <span style="font-weight: bold;">when to merge what from whom.</span><span class="anchor" id="line-22"></span><span class="anchor" id="line-23"></span></p><p class="line867"> </p><h2 id="head-e887affd2cd8981323a262e6815bcfd90ff700f0"><span style="font-size:130%;">Branch Handling</span></h2> <span class="anchor" id="line-24"></span><p class="line874">Branches in Git are a core concept used everyday by every user. In Subversion they are almost an afterthought and tend to be avoided unless absolutely necessary. <span class="anchor" id="line-25"></span><span class="anchor" id="line-26"></span></p><p class="line874">The reason branches are so core in Git is <span style="font-weight: bold;">every developer's working directory is itself a branch. </span>Even if two developers are modifying two different unrelated files at the same time it's easy to view these two different working directories as different branches stemming from the same common base revision of the project. <span class="anchor" id="line-27"></span><span class="anchor" id="line-28"></span></p><p class="line874">So than Git: <span class="anchor" id="line-29"></span><span class="anchor" id="line-30"></span></p><ul><li>Automatically tracks the project revision the branch started from. <span class="anchor" id="line-31"></span><ul><li style="list-style-type: none;">Knowing the starting point of a branch is necessary in order to successfully merge the branch back to the main trunk that it came from. <span class="anchor" id="line-32"></span></li></ul></li><li>Automatically records branch merge events. <span class="anchor" id="line-33"></span><ul><li style="list-style-type: none;">Merge records always include the following details: <span class="anchor" id="line-34"></span></li><li>Who performed the merge. <span class="anchor" id="line-35"></span></li><li>What branch(es) and revision(s) were merged. <span class="anchor" id="line-36"></span><ul><li style="list-style-type: none;">All changes made on the branch(es) remain attributed to the original authors and the original timestamps of those changes. <span class="anchor" id="line-37"></span></li></ul></li><li>What additional changes were made to complete the merge successfully. <span class="anchor" id="line-38"></span><ul><li style="list-style-type: none;">Any changes made during the merge that is beyond those made on the branch(es) being merged is attributed to the user performing the merge. <span class="anchor" id="line-39"></span></li></ul></li><li>When the merge was done <span class="anchor" id="line-40"></span></li><li><p class="line862">Why the merge was done (<em>optional; can be supplied by the user</em>). <span class="anchor" id="line-41"></span></p></li></ul></li><li>Automatically starts the next merge at the last merge. <span class="anchor" id="line-42"></span><ul><li style="list-style-type: none;">Knowing what revision was last merged is necessary in order to successfully merge the same branches together again in the future. <span class="anchor" id="line-43"></span></li></ul></li></ul><h2 id="head-d7b8051a127a0f89c9f9b75669d3e1ee4d3c8b9b"><span style="font-size:130%;">Performance</span></h2> <span class="anchor" id="line-64"></span><p class="line874">Git is extremely fast.  Since all operations (except for push and fetch) are local there is no network latency involved to: <span class="anchor" id="line-65"></span><span class="anchor" id="line-66"></span></p><ul><li>Perform a diff. <span class="anchor" id="line-67"></span></li><li>View file history. <span class="anchor" id="line-68"></span></li><li>Commit changes. <span class="anchor" id="line-69"></span></li><li>Merge branches. <span class="anchor" id="line-70"></span></li><li>Obtain any other revision of a file (not just the prior committed revision). <span class="anchor" id="line-71"></span></li><li>Switch branches. </li></ul><p class="line874"></p><p class="line867"> </p><h2 id="head-5f446707a41740e0775c595e3574d3ffae0608cd"><span style="font-size:130%;">Space Requirements</span></h2> <span class="anchor" id="line-75"></span><p class="line874">Git's repository and working directory sizes are extremely small when compared to SVN. <span class="anchor" id="line-76"></span><span class="anchor" id="line-77"></span></p><p class="line874"></p><p class="line867"> </p>
