--- 
title: Rails Conditional Eager Loading
layout: post
---
Rails's <a href="http://travisonrails.com/2007/02/18/Rails-eager-loading-of-associations">eager loading</a> (<a href="http://railscasts.com/episodes/22">ScreenCast</a>) is an important practice that saves some requests and queries when dealing with table relations in rails.<br />
Up until now, using a condition hash to specify query was a little tricky if you use the eager loading method:<br />
<pre class="brush: ruby">
   User.find(:all, :include =&gt; :jobs, :conditions =&gt; ["jobs.salary &gt; ?",1000])
</pre>
or using a hash (without eager loading)<br />
<pre class="brush: ruby">
   User.find(:all, :conditions =&gt; {:name =&gt; 'eizesus'})
</pre>
Using a conditions array/hash isn’t always my favorite way to write finds in Rails, but in certain cases must have when you deal with complex queries (like and "Advanced Search" feature). <br />
<br />
In my current work,I needed to run conditions on an associated table in just such an "Advanced search" feature, so i came up with this simple and easy way to use a condition hash for eager loading methods:<br />
<pre class="brush: ruby">
   User.find(:all, :include =&gt; :jobs, :conditions =&gt; {:name =&gt; 'eizesus', :jobs =&gt; {:position =&gt; 'Manager'})
</pre>
<br />
or you can prepare the condition hash on the fly:<br />
<pre class="brush: ruby">
conditions = {}
conditions[:first_name] = params[:first_name] unless params[:first_name].blank?
conditions[:last_name] = params[:last_name] unless params[:last_name].blank?
conditions[:jobs] = {:position =&gt; params[:position]} unless params[:position].blank?

@users = User.find(:all, :conditions =&gt; conditions, :include =&gt; :jobs)
</pre>
