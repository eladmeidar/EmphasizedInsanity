--- 
title: "Startup Thoughts: How to avoid screwing up a software project"
layout: post
---
<div style="text-align: center;"><a href="http://failblog.org/2008/06/06/heat-gun-fail/"><img alt="fail-owned-pwned-pictures" class="alignnone size-full wp-image-918" src="http://failblog.wordpress.com/files/2008/06/fail-computer-heat-gun.jpg" /></a></div><h4>Run Programmer, Run<br />
</h4>When developing a new application, mostly when it's being done personally and alone, can sometimes be a very complicated process. you'll need to handle a whole bunch of other stuff than just coding (marketing, server setups even investors hunt) and it can sometimes lead you to a software neglection.<br />
Don't let it happen, run/compile your application every few days, keep it living in your head.<br />
<br />
Sometimes you'll start work on some big shiny feature (e.g. adding a kewl Google maps integration), but stop because you hit a technical bump ("What? no maps for Israel?"), or don’t have the time to finish it ("Need to finish this Company profile by tomorrow") and The source code is left in unfinished state.<br />
You can’t do anything with any of your code until this is fixed, and the longer you leave it, the more you’ll forget and the harder it will be to get started again.<br />
This is called a "broken build", and is a big landmine because it impacts other peoples ability to work (And your ability to continue as well).<br />
<br />
TIP #1: You started something? finish it before moving on to something else.<br />
TIP #2: Stay in touch with your software.<br />
<h4>"I Sure could use a time machine right now...."<br />
</h4>Know these times when you wished you had a time machine? well, it can happen in the process of developing and application too.<br />
People make mistakes, Always. When people make mistakes in the kitchen, the food comes out really bad and you call the local pizza delivery services and solve the problem. When a programmer makes a mistake or is doing a system wide change... you'll need a ready to use Plan B around.<br />
<a href="http://en.wikipedia.org/wiki/Special:Search/Source_Control">Source Control</a> is the software world equivalent of a time machine, you can go back to a certain version of your application and rollback any changes made to your code and application, and by that, maybe reversing a very serious threat to your code.<br />
If you haven’t taken the plunge with revision control yet, I highly recommend looking at some of the <a href="http://blog.eizesus.com/2008/10/free-svngit-hosting-services.html" onclick="javascript:pageTracker._trackPageview ('/outbound/blog.eizesus.com');">free SVN or GIT hosting services post</a>.<br />
<br />
TIP #3: Save yourself, use a source control service. <br />
<h4>"Look at this cooooooolll JQuery accordation!"</h4>Features are fun, Javascript magic is amazing, but you'll need to focus on what's really important <br />
Focusing on things like validation, cool eye candies or extra functions is a great way to build up a large complex code base that doesn’t do anything useful yet.<br />
Focus on the core functionality of your software first — your main features should be complete before you start thinking about WOW stuff.<br />
Wasting trying to think of the perfect name, designing a logo or an icon, choosing the perfect open-source license and making a website won’t get you any closer to having a working application. <br />
<br />
TIP #4: Core functionality first, fun - later. <br />
<h4>Throw your code away and start from scratch - The Netscape mistake<br />
</h4>As Netscape famously discovered a few years ago, <a href="http://www.joelonsoftware.com/articles/fog0000000069.html" onclick="javascript:pageTracker._trackPageview ('/outbound/www.joelonsoftware.com');">throwing away existing code to start afresh is almost never a good idea</a>. Resist the urge and make a series of small, manageable <a href="http://en.wikipedia.org/wiki/Code_refactoring">code re-factoring</a> instead.<br />
<br />
TIP #5: Never sink your own boat, pickup a bucket and start pulling out water <br />
<h4>Pull yourself together before you sit down<br />
</h4>"mmm, Rails? or maybe Adobe Air? or maybe... maybe we'll do the cool gears thing?" <br />
Before doing anything ask yourself a simple question - "What are you actually trying to achieve?", Spend some time with a pen and some paper coming up with a really clear vision of what you’re trying to create — e.g. screen mock-ups, basic core functionality (yes, again) and if there is a process you are trying to imitate, go through it too.<br />
<br />
TIP #6:&nbsp; If you don’t know what you’re doing from the beginning, you’ll have no chance of finishing it.<br />
<br />
<h4>Get the right men for the job</h4>You maybe a coding genius, a super-programmer (<a href="http://www.actionrails.com/about.html">Mike</a> it's you) or other superior programming entity. but unless you are a really something no one had ever seen before, you don't know anything there is to know about every aspect of developing a new software and a products.<br />
If you can't tell the difference between red and green, get a designer to work for you. if you don't have a clue in CSS or DB infrastructure, get someone who know this art to do it.<br />
<br />
TIP #7: Do what you know, not what you don't know.<br />
<br />
<h4>Marketing is Important, but when it's time<br />
</h4>Tell people about your product when you have something to show, open a product twitter account when you have something to say, don't rush yourself forward and try to stick the product or create a hype when you can't back it up by at least screenshots or an actual product on the best scenario.<br />
<br />
TIP #8: Invite people in when you have something to offer them to eat.<br />
<br />
<h4>The difference between a lie and a promise</h4>Users don't mind waiting for features, they mind finding out you promised them something and didn't deliver.<br />
Stand up to your words, and update your users about development progress and new features on the way, as long as you really intend to do it and not just saying to make them download or register.<br />
<br />
TIP #9: Users are like your mother, lie to them, and they'll know.
