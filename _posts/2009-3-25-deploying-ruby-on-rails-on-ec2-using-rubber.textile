--- 
title: Deploying Ruby on Rails on EC2 - Using Rubber
layout: post
---
A while ago i wrote a post tutoring a "deployment of a simple rails application on ec2":http://blog.eizesus.com/2009/1/rails-and-amazon-ec2-beginners-guide using the EC2onRails gem,
in this post i will explain how to use another plugin, called *rubber* that simplifies the deployment of more complex applications, those with multiple instances for example.

h4. Setting the other stuff we need

Follow this section on "my previous Rails on EC2 post":http://blog.eizesus.com/2009/1/rails-and-amazon-ec2-beginners-guide#ec2_keypair to get your EC2 account SSH keypair first, 
Then, install he <code>amazon-ec2</code> gem:
<pre class="brush: bash">
$ sudo gem install amazon-ec2
</pre>
the <code>AWS::S3</code> gem:
<pre class="brush: bash">
$ sudo gem install aws-s3
</pre>
Our beloved <code>Capistrano</code>:
<pre class="brush: bash">
$ sudo gem install capistrano
</pre>
and the <code>nettica</code> gem:
<pre class="brush: bash">
$ sudo gem install nettica
</pre>
note that you only need to install the <code>nettica</code> gem if you need to automatically map specific instances to "A Records":http://en.wikipedia.org/wiki/List_of_DNS_record_types.

h4. Setup Your Application

in your application root, install the <code>rubber</code> plugin:
<pre class="brush: bash">
$ script/plugin install git://github.com/wr0ngway/rubber.git
</pre>

h5. Generating Configuration

and than the crazy part, you'll have to generate a <code>rubber</code> deployment setup that matches your application needs. To do that you'll have to choose on your own.
Each one of these "configurations" contains one or more service that is needed for your application, such as Apache, Mysql, Sphinx and more, and some act as bundles that basically install a group
of other services: 

* apache: Installs apache
* base: configuration needed by all other packages/services *you must install this one anyway*.
* complete_mysql:
** minimal_mysql
** monit
** munin
** memcached
* complete_passenger_mysql:
** base
** mysql
** apache
** passenger
** munin
** memcached
* cruise: the cruise-control (CI server).
* haproxy: the haproxy module.
* memcached: the memcached module
* minimal_mysql:
** base
** mysql
** mongrel
** nginx
** haprox
* minimal_nodb:
** base
** mongrel
** nginx
** haproxy
* mongrel: the mongrel cluster application server
* monit
* munin
* mysql
* mysql_cluster
* mysql_proxy
* nginx
* passenger
* sphinx

The one that we will use is the one that was the most suitable for my application, the <code>complete_passenger_mysql</code>, so in your project root type:
<pre class="brush: bash">
$ script/generate vulcanize complete_passenger_mysql
</pre>

h5. Configuration Files

now edit your <code>config/rubber/rubber.yml</code> and add your <code>access_key, secret_access_key, aws_account, ec2_key_name</code> and <code>ec2_key_file</code> (you can get all of those by following my "previous post":http://blog.eizesus.com/2009/1/rails-and-amazon-ec2-beginners-guide#setup_account).
each service/bundle installs with  a set  configuration files, a <code>rubber-module.yml</code> file for configuring each module will be found in your <code>config/rubber</code> folder, a long side a <code>deploy-module.rb</code> file for deployment specific behavior.

As you can see, the configuration files are basically ERB templates.
Some special variables are defined to handle and control the module:

|_. Variable|_. Description|
|@*path*|The output path to write the transformed config file to|
|@*read_cmd*|The command to use for reading the original config file from, e.g. “crontab -l”|
|@*write_cmd*|The command to use for piping the transformed config file to, e.g. “crontab -”|
|@post 	The|command to run after generating the config file ONLY if it has changed|
|@owner|The owner the output file should have, e.g. “root”|
|@group|The group the output file should have, e.g. “system”|
|@perms|The permissions the output file should have, e.g. 0644|
|@additive|Sets transformation to be additive, only replaces between given delimiters, e.g. @additive = [“## start”, “## end”]|

The variables set in *bold* are those you *must* supply.
In addition, within the configuration files you can access to the rubber configuration objects <code>rubber_env</code> (rubber*.yml) and <code>rubber_instances</code> (instance*.yml).

to test your configuration run:
<pre class="brush: bash">
$ rake rubber:config
</pre>
this will apply your configuration to your <code>development</code> environment, so you can check that everything is up and running.
note that:

# Configuration files that exist in config/rubber/common will be transformed for all hosts.
# Configuration files that exist in config/rubber/role/ will only be transformed on the hosts that are members of role_name.
# Configuration files that exist in config/rubber/host/ will only be transformed on the hosts with a hostname of host_name.

and will override based on that order in favor of the most specific configuration and alphabet order of configuration files.

h4. Bootstrap and Deploy

first, you'll need to create your environment bootstrap, in this case, it's production <code>production</code>:
<pre class="brush: bash">
$ ALIAS=production ROLES=web,haproxy,app,mysql_master,passenger cap rubber:create	
</pre>
Note that this is a simple deployment, to use a little bit more complex deployment use something like:
<pre class="brush: bash">
$ ALIAS=web01 ROLES=web,haproxy, passenger cap rubber:create
$ ALIAS=app01 ROLES=app cap rubber:create
$ ALIAS=app02 ROLES=app cap rubber:create
$ ALIAS=db01 ROLES=mysql_master cap rubber:create
$ ALIAS=db02 ROLES=mysql_slave cap rubber:create	
</pre>
after you finished setting up your Rubber configuration, it's time to create the bootstrap:
<pre class="brush: bash">
$ cap rubber:bootstrap	
</pre>
and then just the regular capistrano deployment fire starters:
<pre class="brush: bash">
$ cap deploy:check
$ cap deploy:setup
$ cap deploy:cold
</pre>

and that's about it.

h4. A Final Note

The process of configuring an instance, bootstarping, and delpoying will run on *all the instances your have specified, old and new!*, so you shoudl *always* check your configuration on a local/staging environment.
