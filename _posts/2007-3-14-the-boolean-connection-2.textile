--- 
title: The Boolean connection
layout: post
---
Few people understand the true mentality of dealing with a Boolean variable.<br />The normal programmer will panic, and immediately attempt to compare it to a Boolean constant.<br /><br />when using Rails, This is wrong.<br /><br />When migrating a boolean typed column using Rails, the actual column type created is "tinyint(1)" (a single digit number presentation which means that the actual value being saved is 0's or 1's.<br />Where is the problem? in Ruby for a change.<br />In Ruby, everything except <strong>nil</strong> and <strong>false</strong> is considered to a true value. In C, Python and many other languages, 0 and possibly other values, such as empty lists, are considered as false.<br /><br />which brings us to the inevitable conclusion, that simplay comparing boolean values to  <span style="font-weight: bold;">true</span> or <span style="font-weight: bold;">false</span> will not do.<br /><br />Rails solves this tiny issue for us, for each boolean attribute, Rails implements a "query method" as i prefer to call them. These query methods are simply called by issuing the boolean attribute name with a "?" suffix.<br /><br />for example, the <span style="font-weight: bold;">@mail_message</span> instance object has a <span style="font-weight: bold;">is_important</span> boolean attribute, so instead of doing:<br /><br /><code><br />@mail_message.is_important == true<br /></code><br />or whatever, we can simply ask rails by:<br /><code><br />@mail_message.is_important?<br /></code><br /><br />beautiful... isn't it?
