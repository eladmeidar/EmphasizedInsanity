<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Emphasized Insanity</title>
 <link href="http://blog.eizesus.com/feed/atom.xml" rel="self"/>
 <link href="http://blog.eizesus.com/"/>
 <updated>2010-03-26T11:35:20-04:00</updated>
 <id>http://blog.eizesus.com/</id>
 <author>
   <name>Elad Meidar</name>
   <email>elad@eizesus.com</email>
 </author>
 
 
 <entry>
   <title>Bag O' Links - 26/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-26-3-2010"/>
   <updated>2010-03-26T00:00:00-04:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-26-3-2010</id>
   <content type="html">&lt;h4&gt;Links&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amirharel.com/2010/03/22/javascript-inheritance/&quot;&gt;Another take on Javascript inheritance&lt;/a&gt; &amp;#8211; &lt;a href=&quot;http://twitter.com/amir_harel&quot;&gt;@amir_harel&lt;/a&gt; suggests this neat trick to imply inheritance in javascript.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://pragprog.com/titles/btlang/seven-languages-in-seven-weeks&quot;&gt;Seven languages in Seven weeks&lt;/a&gt; &amp;#8211; seems like a really neat book from PragProg.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jimneath.org/2010/03/25/how-to-speed-up-textmate-in-large-projects/&quot;&gt;Speeding up TextMate in large projects&lt;/a&gt; &amp;#8211; great tips.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://pivotallabs.com/users/chad/blog/articles/1208-automating-bundler-in-your-deploy&quot;&gt;Automating Bundler in deployments&lt;/a&gt; &amp;#8211; from pivotal.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://yz.mit.edu/wp/2009/12/17/web-sockets-tutorial-with-simple-python-server/&quot;&gt;WebSockets tutorial&lt;/a&gt; &amp;#8211; yeah, it&amp;#8217;s with python but there&amp;#8217;s a good Ruby example other there using &amp;#8220;Cramp&amp;#8221;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://designbeep.com/2010/03/25/31-css-navigation-and-menu-tutorials-you-should-practice/&quot;&gt;Navigation and menus roundup&lt;/a&gt; &amp;#8211; i admit, navigation, menus and footers are my web-fetish.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2010/03/24/a-short-guide-to-open-source-and-similar-licenses/&quot;&gt;Open source license types explained&lt;/a&gt; &amp;#8211; in simple plain english.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.findmebyip.com/litmus/&quot;&gt;Awesome browser support tables&lt;/a&gt; &amp;#8211; HTML5 and CSS3.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://highscalability.com/blog/2010/3/23/digg-4000-performance-increase-by-sorting-in-php-rather-than.html&quot;&gt;Digg improves performance by 4000%%&lt;/a&gt; &amp;#8211; by offloading calculations from DB engine to code. in contrary actually to what i thought is the right thing to do. oh well, me learz. :)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blogs.digitar.com/jjww/2009/01/rabbits-and-warrens/&quot;&gt;RabbitMQ overview&lt;/a&gt; &amp;#8211; a very good writeup.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://phunkwork.com/post/460924983/hunting-bugs-thru-history&quot;&gt;Hunting bugs in History&lt;/a&gt; &amp;#8211; some &lt;code&gt;git-bisect&lt;/code&gt; magic.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jamesgolick.com/2010/3/14/crazy-heretical-and-awesome-the-way-i-write-rails-apps.html&quot;&gt;This is how i write Rails applications&lt;/a&gt; &amp;#8211; James shades some light on this technique in a really interesting read.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.josh-nesbitt.net/2009/09/08/implementing-a-simple-lockfile-system-in-ruby/&quot;&gt;Implementing LockFile with Ruby&lt;/a&gt; &amp;#8211; really useful if for some reason you need to implement a Mutex on your own.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://javascript.crockford.com/code.html&quot;&gt;Javascript coding conventions&lt;/a&gt; &amp;#8211; a collection of code convention suggestions for Javascript.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://thelincolnshirepoacher.com/pages/databases-are-for-pussies&quot;&gt;Databases are for pussies&lt;/a&gt; &amp;#8211; a vulgar name for a great article, also introduces &lt;a href=&quot;http://github.com/chrislloyd/tyrone&quot;&gt;tyrone&lt;/a&gt;, a rapid prototyping Sinatra based solution.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://developer.yahoo.com/hadoop/tutorial/index.html&quot;&gt;Yahoo!&amp;#8217;s Hadoop tutorial&lt;/a&gt; &amp;#8211; wuhoo.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.envylabs.com/2010/03/blue-light-special/&quot;&gt;BlueLight&lt;/a&gt; &amp;#8211; an extension to Clearance that includes roles and some administration roots.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://kingapi.com/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; King&lt;/a&gt; &amp;#8211; an &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; providers aggregator.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://getcloudcache.com/&quot;&gt;CloudCache&lt;/a&gt; &amp;#8211; offers simple and affordable on-demand caching.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://impel.simulacre.org/api&quot;&gt;Impl&lt;/a&gt; &amp;#8211; Javascript &lt;span class=&quot;caps&quot;&gt;ORM&lt;/span&gt; (requires HTML5).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/jot/notifo&quot;&gt;Notifo&lt;/a&gt; &amp;#8211; a Ruby wrapper for Notifo, allows sending push messages to mobile users.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/wycats/artifice&quot;&gt;Artifice&lt;/a&gt; &amp;#8211; A few weeks ago i made a gem that used sinatra to mock a webservice, &lt;code&gt;wycats&lt;/code&gt; wins with this one.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2010/03/24/mootouch/&quot;&gt;MooTouch&lt;/a&gt; &amp;#8211; the MooTools clone of jQTouch.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Bag O' Links - 21/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-21-3-2010"/>
   <updated>2010-03-21T00:00:00-04:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-21-3-2010</id>
   <content type="html">&lt;h4&gt;Rails developers needed in Israel.&lt;/h4&gt;
&lt;p&gt;In a few weeks from now, &lt;a href=&quot;http://www.nautilus6.com&quot;&gt;Nautilus6&lt;/a&gt; is going to get a new shiny branch in Israel. This obviously means, that we need some new kick-ass Ruby on Rails developers to fill our new team.&lt;br /&gt;
We are basically looking for people that love web, love to make cool applications and are not afraid from taking up challenges every once in a while. We offer a full-time position in various aspects of web development (Yeah you javascript ninjas and designers are welcome too) and we don&amp;#8217;t even force you to come and work in an office so if you want to stay home, that&amp;#8217;s fine.&lt;/p&gt;
&lt;p&gt;I am aware that there is a currently low Ruby on Rails developer count in Israel, therefore we do offer some training plans for those who currently work using other frameworks and development stacks and introduce them to eternal happiness and joy.&lt;/p&gt;
&lt;p&gt;General requirements are pretty much standard:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Having prior experience with Ruby on Rails is a &lt;span class=&quot;caps&quot;&gt;HUGE&lt;/span&gt; plus.&lt;/li&gt;
	&lt;li&gt;Knowing your way around &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; (2, 3 is cool too), Standard &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; and Client side libraries (Preferably Mootools).&lt;/li&gt;
	&lt;li&gt;Database and general data layer solutions (noSQL).&lt;/li&gt;
	&lt;li&gt;Advanced knowledge in professional aspects of web development such as Scaling and optimizations of existing application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Currently we are working on several internal developments and on world wide client applications, it&amp;#8217;s never boring basically.&lt;/p&gt;
&lt;p&gt;Now, on to the interesting stuff :)&lt;/p&gt;
&lt;h4&gt;Links&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2010/03/12/45-fresh-useful-javascript-and-jquery-techniques-and-tools/&quot;&gt;A collection of Javascript Techniques&lt;/a&gt; &amp;#8211; possibly just another roundup, but it&amp;#8217;s here if i&amp;#8217;ll ever need it.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.napcsweb.com/blog/2010/03/15/making-as-strin-alternate-attribute-readers/&quot;&gt;Making &amp;#8216;as_string&amp;#8217; alternate attribute getters&lt;/a&gt; &amp;#8211; Brian Hogan suggest a neat little trick to spice up your code.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.curtismchale.ca/ruby-on-rails/why-rails-feels-like-a-developers-only-playground/&quot;&gt;Why Rails feels like a developer&amp;#8217;s only playground&lt;/a&gt; &amp;#8211; a Designer&amp;#8217;s rant.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.rubybestpractices.com/posts/gregory/022-rbp-now-open.html&quot;&gt;Ruby Best Practices is now free&lt;/a&gt; &amp;#8211; free e-book, right here.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://webroar.in/&quot;&gt;WebRoar&lt;/a&gt; &amp;#8211; claims to be the fastest Ruby application server, haven&amp;#8217;t tried and would appreciate notes.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.engineyard.com/blog/2010/architecture-wins-varnish-and-more/&quot;&gt;Ruby scales if you do it right&lt;/a&gt; &amp;#8211; So stop blaming the floor if you are a bad dancer.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://rails.co.za/2009/11/14/monitoring-delayed-job-with-bluepill.html&quot;&gt;Monitoring DelayedJob with BluePill&lt;/a&gt; &amp;#8211; yes, bluepill is awesome.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://tech.bluesmoon.info/2009/09/scaling-writes-in-mysql.html&quot;&gt;Scaling MySQL writes&lt;/a&gt; &amp;#8211; if everything we use will get so amazingly scalable, who should we bash? luckily there are microsoft and buzz.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://designreviver.com/tips/exploring-the-new-features-of-css3/&quot;&gt;New features of CSS3&lt;/a&gt; &amp;#8211; i am still refusing to jump on that wagon until at least all major browsers show decent support.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://addyosmani.com/blog/the-ultimate-guide-to-javascript-in-web-design/&quot;&gt;Effectively using javascript in web design&lt;/a&gt; &amp;#8211; a nice writeup.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://fuelyourcoding.com/set-rails-logging-on-fire/&quot;&gt;Rails logging loves Firebug&lt;/a&gt; &amp;#8211; could be nice.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://hmarr.com/2010/mar/18/full-text-search-with-mongodb/&quot;&gt;Full text search in MongoDB&lt;/a&gt; &amp;#8211; a simple full text search engine, that uses MongoDB as its backend.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://nosql.mypopescu.com/post/456418620/learn-mongodb-in-104-slides&quot;&gt;Learn MongoDB in 104 slides&lt;/a&gt; &amp;#8211; awesome.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://geewax.org/2009/11/21/agile-git-workflow.html&quot;&gt;Agile Git workflow&lt;/a&gt; &amp;#8211; another good, actually very good workflow suggestion.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://highscalability.com/blog/2010/3/16/justintvs-live-video-broadcasting-architecture.html&quot;&gt;Justin.tv&amp;#8217;s video broadcasting architecture&lt;/a&gt; &amp;#8211; real time video streaming for millions of users. doin&amp;#8217; it rite.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/nateware/redis-objects&quot;&gt;redis-objects&lt;/a&gt; &amp;#8211; Map Redis types directly to Ruby objects.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.datejs.com/&quot;&gt;DateJS&lt;/a&gt; &amp;#8211; something like Chronic for javascript, awesome date and time management.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/pauldix/typhoeus&quot;&gt;Typhoeus&lt;/a&gt; &amp;#8211; As a pro &lt;code&gt;Net::HTTP&lt;/code&gt; hater, i find this one really nice.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://gist.github.com/336544&quot;&gt;Who needs &lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt;?&lt;/a&gt; &amp;#8211; &amp;#8220;when you got &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt;&amp;#8221;, thinks Jose Valim.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/micha/resty&quot;&gt;Resty&lt;/a&gt; &amp;#8211; Little command line &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; interface that you can use in pipelines (bash or zsh).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/alexyoung/jschat&quot;&gt;jsChat&lt;/a&gt; &amp;#8211; &lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;-based chat that has web and console clients, and a server.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://ruby-audioinfo.rubyforge.org/&quot;&gt;Ruby Audio info&lt;/a&gt; &amp;#8211; ruby-audioinfo glue together various audio ruby libraries and presents a unified &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt; to the developper. Currently, supported formats are: mp3, ogg, mpc, ape, wma, flac, aac, mp4, m4a. some writes are available too.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/menno/cloudfront_asset_host&quot;&gt;CloudFront asset_host&lt;/a&gt; &amp;#8211; Easy deployment of your assets on CloudFront for Rails.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://masonoise.wordpress.com/2010/03/17/redis-cheat-sheet-v1-0/&quot;&gt;Redis CheatSheet&lt;/a&gt; &amp;#8211; weee.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/ryanb/ruby-warrior&quot;&gt;Ruby-warrior&lt;/a&gt; &amp;#8211; a ruby AI game.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://randomkeygen.com/&quot;&gt;Random Key generator&lt;/a&gt; &amp;#8211; random password generator.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Bag O' Links - 15/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-15-3-2010"/>
   <updated>2010-03-15T00:00:00-04:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-15-3-2010</id>
   <content type="html">&lt;h4&gt;Links&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://community.pivotaltracker.com/pivotal/topics/is_there_a_way_to_do_basic_time_tracking_spent_on_a_story?utm_medium=widget&amp;amp;utm_source=widget_pivotal&amp;amp;from_gsfn=true&quot;&gt;Enable time tracking in Pivotal Tracker&lt;/a&gt; &amp;#8211; This is another good service from those guys at pivotal.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://tjkdesign.com/ez-css/css/base.css&quot;&gt;a good basic &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;&lt;/a&gt; &amp;#8211; I find this one useful, pretty sure i posted it a few weeks/days ago but i can&amp;#8217;t find it.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.mindscape.co.nz/staff/johndaniel/index.php/2010/03/business-porn-the-company-dashboard/&quot;&gt;Statusboards roundup&lt;/a&gt; &amp;#8211; Ours is cooler, but i need to find a way to post a picture that is not completely blurred. :)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.napcsweb.com/blog/2010/03/11/basic-authentication-in-ruby-on-rails-in-case-you-forgot/&quot;&gt;Basic authentication in Ruby on Rails, in case you forgot&lt;/a&gt; &amp;#8211; Brian refreshes your memory.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.humblesoftware.com/finance/index&quot;&gt;Awesome HTML5 google-like charts&lt;/a&gt; &amp;#8211; screw you IE, srsly.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://robots.thoughtbot.com/post/443934722/redis-data-cheeseburgers&quot;&gt;Redis tutorial&lt;/a&gt; &amp;#8211; from the dudes in ThoughtBot.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://mrtopf.de/blog/podcast/nosqllive_scaling/&quot;&gt;Scaling with noSQL&lt;/a&gt; &amp;#8211; a talk from noSQL live in boston.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://shiftcommathree.com/articles/how-to-install-mongodb-on-os-x&quot;&gt;Install MongoDB on MacOS&lt;/a&gt; &amp;#8211; don&amp;#8217;t use Macports, it sucks.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.nahurst.com/visual-guide-to-nosql-systems&quot;&gt;Visual Guide to noSQL systems&lt;/a&gt; &amp;#8211; a graphic explanation about this fascinating ecosystem.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://html5doctor.com/i-b-em-strong-element&quot;&gt;Semantic I and B tags?&lt;/a&gt; &amp;#8211; author raises a good point here. although i&amp;#8217;m a fan of &lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;, this article makes some kind of sense.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.alfajango.com/blog/make-sure-your-rails-application-is-actually-caching-and-not-just-pretending/&quot;&gt;Make sure your Rails application is cacheing properly&lt;/a&gt; &amp;#8211; Good idea to double-check apache/nginx too.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://git.wiki.kernel.org/index.php/GitFaq&quot;&gt;Git Faq&lt;/a&gt; &amp;#8211; real life questions answered. good resource. (might wanna read this &lt;a href=&quot;http://reinh.com/blog/2009/03/02/a-git-workflow-for-agile-teams.html&quot;&gt;post&lt;/a&gt; from ReinH about Git workflows in agile teams)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://aws-musings.com/7-easy-tips-to-reduce-your-amazon-ec2-cloud-costs/&quot;&gt;7 easy tips to reduce your EC2 cloud expenses&lt;/a&gt; &amp;#8211; #8 &amp;#8211; Use heroku, works for me.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.pythian.com/news/9387/liveblogging-at-confoo-blending-nosql-and-sql/&quot;&gt;Liveblogging at Confoo: Blending NoSQL and &lt;span class=&quot;caps&quot;&gt;SQL&lt;/span&gt;&lt;/a&gt; &amp;#8211; another roundup.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://dailyjs.com/2010/03/15/hosting-nodejs-apps/&quot;&gt;Hosting Node.js applicaitons&lt;/a&gt; &amp;#8211; server installation instructions.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://designerwall.co.za/2010/03/60-excellent-css3-tutorials-and-techniques-you-should-know/&quot;&gt;CSS3 tutorials and tricks you should now&lt;/a&gt; &amp;#8211; same as the above.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://designingfortheweb.co.uk/book/index.php&quot;&gt;Designing for the web&lt;/a&gt; &amp;#8211; free book, &lt;strong&gt;a must read&lt;/strong&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://ayende.com/Blog/archive/2010/03/14/map-reduce-ndash-a-visual-explanation.aspx&quot;&gt;MapReduce: explained with pictures!&lt;/a&gt; &amp;#8211; i still only partially get it. :)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://drnicwilliams.com/2010/03/15/using-coffeescript-in-rails-and-even-on-heroku/&quot;&gt;Using coffeescript in Rails and even Heroku&lt;/a&gt; &amp;#8211; another winner from Dr. Nic.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.eucalyptus.com/&quot;&gt;Eucalyptus&lt;/a&gt; &amp;#8211; thinking about running your own cloud ? this is a good toy to use.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://pastie.org/private/xnslbf3exarosmeqbahq&quot;&gt;one of the worst controller codes ever&lt;/a&gt; &amp;#8211; thanks &lt;a href=&quot;http://twitter.com/anathematic&quot;&gt;@anathematic&lt;/a&gt;. (just the messanger, not the actual author of this hell raised code).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/reddavis/Naive-Bayes&quot;&gt;Naive-Bayes&lt;/a&gt; &amp;#8211; Simple Naive Bayes classifier.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/reductivelabs/puppet-dashboard/&quot;&gt;puppet-manager&lt;/a&gt; &amp;#8211; a web interface for Puppet.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/smparkes/env-js&quot;&gt;envJS&lt;/a&gt; &amp;#8211; A pure-JavaScript browser environment with early rubygem support. wow.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.1stwebdesigner.com/freebies/best-free-web-user-interface-icons/&quot;&gt;Ultimate roundup of free UI icons&lt;/a&gt; &amp;#8211; cool.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.tuttoaster.com/showcase-of-excellent-tables-and-best-practices/&quot;&gt;Showcase of excellent table designs&lt;/a&gt; &amp;#8211; really good stuff.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.net-kit.com/html5-css3-layout-tutorials-and-templates/&quot;&gt;HTML5 and CSS3 templates&lt;/a&gt; &amp;#8211; when this HTML5 things will grow teeth, that would be awesome.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/mtrudel/menutree&quot;&gt;MenuTree&lt;/a&gt; &amp;#8211; a simple hierachical command line shell.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/delano/benelux&quot;&gt;Benelux&lt;/a&gt; &amp;#8211; Benchmarking sugar for ruby.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Bag O' Links - 10/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-10-3-2010"/>
   <updated>2010-03-10T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-10-3-2010</id>
   <content type="html">&lt;h4&gt;Links&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://lucidcode.co.nz/blog/archives/2010/03/02/testing-email-delivery-in-rails-with-gmail-httparty/&quot;&gt;Use HTTParty to test emails to GMail&lt;/a&gt; &amp;#8211; nice trick.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://gist.github.com/322391&quot;&gt;Test execution time of a ruby block&lt;/a&gt; &amp;#8211; &lt;a href=&quot;http://www.ryanbigg.com&quot;&gt;@ryanbigg&lt;/a&gt; with a useful tip.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/sinatra/following&quot;&gt;Sinatra&amp;#8217;s follwoing list on Github&lt;/a&gt; &amp;#8211; A good list of resources on Sinatra.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.viddler.com/explore/kblake/videos/&quot;&gt;Ruby and Rails chops&lt;/a&gt; &amp;#8211; some more Rails screencasts.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.hasmanythrough.com/2008/2/27/count-length-size&quot;&gt;size vs. count vs. length&lt;/a&gt; &amp;#8211; Some differences caused by ActiveRecord.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://neeraj.name/2010/03/11/prototypal-inheritance-in-javascript.html&quot;&gt;Prototypal inheritance with Javascript&lt;/a&gt; &amp;#8211; a brief explanation.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://macperformanceguide.com/index.html&quot;&gt;Mac Performance guide&lt;/a&gt; &amp;#8211; good tips and pointers when choosing a Mac. (Thanks &lt;a href=&quot;http://afreshcup.com&quot;&gt;mike&lt;/a&gt; !)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://mrdoob.com/lab/javascript/harmony/#sketchy&quot;&gt;Sketchy&lt;/a&gt; &amp;#8211; this is by far, the best web based drawing tool i&amp;#8217;ve seen.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://nicolasgallagher.com/demo/pure-css-speech-bubbles/bubbles.html&quot;&gt;Pure &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; bubbles&lt;/a&gt; &amp;#8211; win, this should work on the evil browsers as well with some common js hacks.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2010/03/08/entering-the-wonderful-world-of-geo-location/&quot;&gt;Geo location with javascript&lt;/a&gt; &amp;#8211; another awesome writeup by smashing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/glasner/nimble_nodes&quot;&gt;nimble_nodes&lt;/a&gt; &amp;#8211; Automatic scaling for Heroku Dynos. haven&amp;#8217;t tried it but it does seem to be a nice solution, especially if you could set a threshold to your payments.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://iamneato.com/2010/01/03/speks-for-node&quot;&gt;speks for Node.js&lt;/a&gt; &amp;#8211; an RSpec-alike library for Node.js which is quiet nice actually.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://code.google.com/p/remail-iphone/&quot;&gt;remail is now opensourced&lt;/a&gt; &amp;#8211; a successful and recently purchased by Google iPhone application is opensource, good to read.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://oncloud.org/&quot;&gt;oncloud&lt;/a&gt; &amp;#8211; a really nice service that allow quick exposure of a rails app.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://gist.github.com/326227&quot;&gt;Examples of ActionMailer parameters&lt;/a&gt; &amp;#8211; from Redmine.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/futurechimp/enigmamachine&quot;&gt;EnigmaMachine&lt;/a&gt; &amp;#8211; A queue based video encoder.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/plataformatec/show_for&quot;&gt;show_for&lt;/a&gt; &amp;#8211; Dry your model&amp;#8217;s attribute display views.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/benpickles/js-model&quot;&gt;js_model&lt;/a&gt; &amp;#8211; a simple &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; to create models in Javascript. includes validation and other fun stuff.. requires jQueyr tho.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://tjkdesign.com/ez-css/css/base.css&quot;&gt;A comprehensive &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; reset and basic layout document&lt;/a&gt; &amp;#8211; and a really good one.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.spritely.net/&quot;&gt;spritely&lt;/a&gt; &amp;#8211; a really, &lt;span class=&quot;caps&quot;&gt;REALLY&lt;/span&gt; impressive animation plugin for jquery. claims to compete with Flash too.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.panic.com/blog/2010/03/the-panic-status-board/&quot;&gt;The panic status board&lt;/a&gt; &amp;#8211; Pretty awesome implementation of a team-status viewer.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/mislav/twitter-login&quot;&gt;Login with twitter to your application, Rack version&lt;/a&gt; &amp;#8211; might, just might, be useful.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/seamusabshere/data_miner&quot;&gt;DataMiner&lt;/a&gt; &amp;#8211; Download and import &lt;span class=&quot;caps&quot;&gt;XLS&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;ODS&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;CSV&lt;/span&gt; into your active record models. It&amp;#8217;s a little bit weird and out of context imo, but it might develop into something interesting.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/mocoso/cucumber-screenshot&quot;&gt;cucumber-screenshots&lt;/a&gt; &amp;#8211; capture screenshots of the pages generated by your Rails application as it runs your Cucumber/Webrat features (webkit only). For the other platform &lt;a href=&quot;http://github.com/aslakhellesoy/cucumber/blob/master/examples/watir/features/support/screenshots.rb&quot;&gt;Watir&lt;/a&gt; will do the trick.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Creating a Rails authentication system on Mongoid Part 3 - Password Resets</title>
   <link href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid-part-3-password-resets-8-3-2010"/>
   <updated>2010-03-08T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/creating-a-rails-authentication-system-on-mongoid-part-3-password-resets-8-3-2010</id>
   <content type="html">&lt;p&gt;In the last &lt;a href=&quot;http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid-part-2-7-3-2010/&quot;&gt;post&lt;/a&gt; we added some functionality to our authentication system. We added a &amp;#8220;Remember me&amp;#8221; functionality to allow users to log in using a cookie and we also added an activation process that authenticates the email address we get from the user.&lt;/p&gt;
&lt;p&gt;On this post, i&amp;#8217;ll cover &lt;strong&gt;password resets&lt;/strong&gt;:&lt;/p&gt;
&lt;h4&gt;Password Resets&lt;/h4&gt;
&lt;p&gt;The logic behind a password reset process is rather simple, basically it is very similar to the &lt;strong&gt;activation&lt;/strong&gt; process we did before.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;We create some kind of a temporary (perishable) token that identifies the user who wishes to reset the password.&lt;/li&gt;
	&lt;li&gt;We send the user an email with a link that contains that token and leads to a page that allows the user to choose a new password.&lt;/li&gt;
	&lt;li&gt;We update the new password, and start dancing.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;User.rb&lt;/h5&gt;
&lt;p&gt;First, we are going to add a field that will contain that reset token, and a method to generate it when required:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/325301.js?file=user.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;That&amp;#8217;s basically it.&lt;/p&gt;
&lt;h5&gt;UsersController&lt;/h5&gt;
&lt;p&gt;We need to add a few actions:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;one to generate the token and trigger the reset password email.&lt;/li&gt;
	&lt;li&gt;one to show a &amp;#8220;reset password&amp;#8221; form with password and password confirmation field.&lt;/li&gt;
	&lt;li&gt;and last, an action to save the new password and log in the user. We can&amp;#8217;t use the &lt;code&gt;#update&lt;/code&gt; action because we need a little different behavior that i think is enough to justify a separate action: First we need to find the user record based on a token not by &lt;code&gt;id&lt;/code&gt; and second, we need to use our &lt;code&gt;logout_keeping_session&lt;/code&gt; to make sure no malicious changes are made to a logged in user if it exists.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The process will work like that:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The user will be able to go on a form and enter his email in case they forgot the password, that action will be &lt;code&gt;UsersController#forgot_password&lt;/code&gt;.&lt;/li&gt;
	&lt;li&gt;If the user entered a valid email address (and one that identifies a user on the application), then &lt;code&gt;UsersController#send_password_reset&lt;/code&gt; will generate a new reset token and send the user with reset instructions.&lt;/li&gt;
	&lt;li&gt;When the user follows the reset link on the email, they&amp;#8217;ll arrive on &lt;code&gt;UsersController#reset_password&lt;/code&gt; that will match the reset token from the &lt;span class=&quot;caps&quot;&gt;URI&lt;/span&gt; to a specific user on the system and allow the user to enter a new password if matched.&lt;/li&gt;
	&lt;li&gt;Once the user had changed and saved the password, they will be logged off and asked to re-login with their new password.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;#8217;s the current &lt;code&gt;UsersController&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/325973.js?file=users_controller.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;Source for the &lt;a href=&quot;http://gist.github.com/325981&quot;&gt;UsersController#forgot_password view&lt;/a&gt;, &lt;a href=&quot;http://gist.github.com/325982&quot;&gt;UsersController#send_password_reset view&lt;/a&gt;, &amp;#8220;UserMailer model&amp;#8221;http://gist.github.com/325983, &lt;a href=&quot;http://gist.github.com/325984&quot;&gt;Reset instructions mail template&lt;/a&gt; and &lt;a href=&quot;http://gist.github.com/325986&quot;&gt;UsersController#reset_password&lt;/a&gt; added.&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;Again, it seems that we tackled most of the problems we had with Mongoid in the early stages and practically nothing bothered us too much since the first part of this series.&lt;/p&gt;
&lt;p&gt;I keep the implementation of a background processor until a bit later, it is not that important at this stage so we&amp;#8217;ll get back to it later.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Creating a Rails authentication system on Mongoid Part 2 - Remember me and Account activation</title>
   <link href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid-part-2-7-3-2010"/>
   <updated>2010-03-07T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/creating-a-rails-authentication-system-on-mongoid-part-2-7-3-2010</id>
   <content type="html">&lt;p&gt;On the first part of &lt;a href=&quot;http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid/&quot;&gt;Creating a Rails authentication system on Mongoid&lt;/a&gt; we tackled the basic structure of our authentication system. In this part we&amp;#8217;ll tackle our need in creating a &amp;#8220;Remember me&amp;#8221; functionality to allow users to login from a cookie and a basic account activation process.&lt;/p&gt;
&lt;p&gt;As a general thumb rule to this experience we try not to re-invent the wheel when we can, which basically means that we look at the existing authentication libraries source code and try to see if it has some kind of a problem on Mongo, if it doesn&amp;#8217;t we use it and i if does we fix it as you read in the first part.&lt;/p&gt;
&lt;p&gt;Out of all the authentication libraries we examined (and dropped for this cause) the one i liked the most and in my opinion the simplest yet complete is &amp;#8220;Restful Authentication&amp;#8221;, so we chose it as our base line and we use code snippets from it when ever we can.&lt;/p&gt;
&lt;h4&gt;Remember me?&lt;/h4&gt;
&lt;p&gt;The remember me functionality allows the user to login using a generated token that is found on a cookie we create, this allows the user to login without putting his user name and password &lt;strong&gt;everytime&lt;/strong&gt; they want to login as long as the cookie was not expired.&lt;/p&gt;
&lt;p&gt;The first thing we need to do to allow a login from cookie, is to get our User model familiar with some new fields and methods to make that process possible.&lt;/p&gt;
&lt;p&gt;First, we need to add a few fields to our user document and a add a few methods to instance and class, this is our new &lt;code&gt;User.rb&lt;/code&gt;:&lt;/p&gt;
&lt;h5&gt;User.rb changes&lt;/h5&gt;
&lt;p&gt;We changed &lt;code&gt;User.rb&lt;/code&gt; a bit:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324635.js?file=User.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;We &lt;strong&gt;added 2 fields&lt;/strong&gt;, &lt;code&gt;remember_token_expires_at&lt;/code&gt; and &lt;code&gt;remember_token&lt;/code&gt;, both to keep a token and and an expiry limit.&lt;br /&gt;
We also added the following instance methods:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;remember_token?&lt;/strong&gt; &amp;#8211; determines if a token should and can be remembered.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;remember_me&lt;/strong&gt; &amp;#8211; generates and saves the token and expiry limit.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;refresh_token&lt;/strong&gt; &amp;#8211; creates a new token.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;forget_me&lt;/strong&gt; &amp;#8211; cleans the token and expiry limit fields.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we also added the following class methods:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;User.secure_digest&lt;/strong&gt; &amp;#8211; a wrapper to our encryption method.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;User.make_token&lt;/strong&gt; &amp;#8211; generates a new token.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now that we changed some of the options for our session management, we will need to update &lt;code&gt;sessions_controller&lt;/code&gt; and &lt;code&gt;application_controller&lt;/code&gt; as well.&lt;/p&gt;
&lt;h5&gt;ApplicationController changes&lt;/h5&gt;
&lt;p&gt;In the end of Part 1, i gave an example to some methods that should be on &lt;code&gt;application_controller&lt;/code&gt; in order to make the session management and the entire authentication process easier. Since those were just examples and were meant barely to support basic usage, we will need to go through it a bit more seriously and create a more precise and smart &lt;code&gt;application_controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this case, we can simply grab all the methods from Restful Authentication&amp;#8217;s &lt;code&gt;authentication.rb&lt;/code&gt; module, and weld it to our &lt;code&gt;application_controller&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324641.js?file=application_controller.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;we added a few methods and changed a few existing ones, this is pretty straight forward and basically a 1:1 copy from Restful Authentication, the only important thing to really pay attention to are the &lt;code&gt;current_user&lt;/code&gt; and the &lt;code&gt;current_user=&lt;/code&gt; which are different than what we had in my previous example and now takes more into consideration (cookies and HTTPauth for example.)&lt;/p&gt;
&lt;p&gt;Since now we have a getter for &lt;code&gt;current_user&lt;/code&gt; we need to change our &lt;code&gt;sessions_controller&lt;/code&gt; too.&lt;/p&gt;
&lt;h5&gt;SessionsController changes&lt;/h5&gt;
&lt;p&gt;This is our current &lt;code&gt;sessions_controller&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324647.js?file=sessions_controller.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;note the &amp;#8220;remember me&amp;#8221; functionality consideration and the usage of our cookie-based-login methods from &lt;code&gt;application_controller&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Now you can simply add a checkbox named &amp;#8220;remember_me&amp;#8221; to your &lt;code&gt;SessionsController#new&lt;/code&gt; form, but i am sure you can do that without a gist :)&lt;/p&gt;
&lt;h4&gt;Activation&lt;/h4&gt;
&lt;p&gt;&amp;#8220;Account Activation&amp;#8221; is generally a process that is meant to make sure the user who filled the registration form really has access to the email account by sending that address a message with a token-generated link that upon clicked, proves ownership of this email address and activates the account.&lt;/p&gt;
&lt;h5&gt;User.rb&lt;/h5&gt;
&lt;p&gt;We had to find a solution to annotate the user instance with it&amp;#8217;s current activation status, with that given we figured we have 2 options to tackle it:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;simple add a boolean field to store the current activation status&lt;/li&gt;
	&lt;li&gt;use some kind of a state machine that will allow us some more flexibility later&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Bearing in mind that we won&amp;#8217;t need more than a single status, we decided to go with the first option and simply add an &lt;code&gt;active&lt;/code&gt; boolean field, an &lt;code&gt;activation_code&lt;/code&gt; token field and an &lt;code&gt;activated_at&lt;/code&gt; timestamp. we also added those fields to our &lt;code&gt;attr_protected&lt;/code&gt; list since we don&amp;#8217;t really want them changed by mass-assignment.&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324659.js?file=user.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;We also added a simple &lt;code&gt;before_create&lt;/code&gt; methods that will generate an activation token for our user and a method to &lt;code&gt;activate!&lt;/code&gt; the user.&lt;/p&gt;
&lt;p&gt;Given the key step in an activation process is the step where your application sends the user an email message with the activation link so we&amp;#8217;ll need to find a good way to send out an activation email when a user is created.&lt;/p&gt;
&lt;p&gt;As far as outgoing emails best practices goes, it&amp;#8217;s better not to preform the &lt;code&gt;ActionMailer#deliver_...&lt;/code&gt; method in the controller itself, but to:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Use an observer that will send that email when the current callback is fired. In our case that would be an &lt;code&gt;after_create&lt;/code&gt; observer on the User model.&lt;/li&gt;
	&lt;li&gt;Offload the task to some kind of a background processor such as DelayedJob or Resque.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A quick check in the Mongoid source-code revealed that we don&amp;#8217;t have support for Observers so that option is ruled out (again, until a patch arrives). As for a background processor, while DelayedJob has an ActiveRecord dependency Resque is pretty much free and relies on Redis so we decided to use Resque in our application.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll cover the email management on one of the next posts, but for now we&amp;#8217;ll just use an &lt;code&gt;after_create&lt;/code&gt; callback on the User model that will perform a regular &lt;code&gt;ActionMailer&lt;/code&gt; delivery.&lt;/p&gt;
&lt;h5&gt;UsersController changes (and a bonus mailer)&lt;/h5&gt;
&lt;p&gt;Since we take care of the email notification on the model level (for now, until we offload it to a background processor later) we don&amp;#8217;t need to change our &lt;code&gt;UsersController#create&lt;/code&gt; methods, but we do need to add an action that will take care of the activation for us:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324700.js?file=users_controller.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;Remember to update your routes and either:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;add a &lt;code&gt;:collection =&amp;gt; {:activate =&amp;gt; :get}&lt;/code&gt; to your &lt;code&gt;map.users&lt;/code&gt; routes.&lt;/li&gt;
	&lt;li&gt;add a named route like &lt;code&gt;map.activate '/users/activate/:activation_code, :controller =&amp;gt; 'users', :action =&amp;gt; 'activate'&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;we chose to add a &lt;strong&gt;named route&lt;/strong&gt;, just because it makes more sense and that the &lt;code&gt;activate&lt;/code&gt; action is not a collection action, but not one that requires an &lt;code&gt;id&lt;/code&gt; too.&lt;/p&gt;
&lt;p&gt;Here are a &lt;a href=&quot;http://gist.github.com/324719&quot;&gt;sample user mailer&lt;/a&gt; and an &lt;a href=&quot;http://gist.github.com/324722&quot;&gt;activation mail view&lt;/a&gt; if you really need them :)&lt;/p&gt;
&lt;h4&gt;Conclusion&lt;/h4&gt;
&lt;p&gt;In this part we didn&amp;#8217;t ran into &lt;strong&gt;that&lt;/strong&gt; many issues because we use Mongoid, the only real problem was the lack of observers but since we are going to offload the email sending process to a background processor, it doesn&amp;#8217;t really matter.&lt;br /&gt;
In the next part, we&amp;#8217;ll tackle password resets and background processing.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Creating a Rails authentication system on Mongoid - Part 1</title>
   <link href="http://blog.eizesus.com/2010/03/creating-a-rails-authentication-system-on-mongoid"/>
   <updated>2010-03-06T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/creating-a-rails-authentication-system-on-mongoid</id>
   <content type="html">&lt;h4&gt;Preface&lt;/h4&gt;
&lt;p&gt;A few days ago we started our first real all-&lt;a href=&quot;http://www.mongodb.org&quot;&gt;MongoDB&lt;/a&gt; project at &lt;a href=&quot;http://www.nautilus6.com&quot;&gt;Nautilus6&lt;/a&gt;.&lt;br /&gt;
Up until now we used Mongo only on small time projects, ones that hardly required any data storage at all so this is practically the first real project that we will try (and hopefully succeed) to deploy with Mongo as the data layer.&lt;/p&gt;
&lt;p&gt;Since we use Rails on this project (Duh) we had to choose between the existing MongoDB adapters for rails:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/jnunemaker/mongomapper&quot;&gt;MongoMapper&lt;/a&gt; &amp;#8211; Which is pretty slick, has some plugin support but also replicates some of the familiar ActiveRecord functionality like: Dirty Attributes, Dynamic finders and magic timestamp attributes.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/durran/mongoid&quot;&gt;Mongoid&lt;/a&gt; &amp;#8211; the new child, missing some features from MM (dirty attributes, dynamic finders for example) but does cover some ActiveRecord wonders MM doesn&amp;#8217;t: Versioning, named scopes and better validation options. MongoId also supports a master/slave infrastructure which might be useful.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We decided to go with Mongoid due to the fact that i kind of like the code base better. Yes, it&amp;#8217;s young and not perfect but i still get the impression of &amp;#8220;we should do this thing right&amp;#8221; rather than the &amp;#8220;I want everything now&amp;#8221; approach (again, a matter of personal preference at the end, keep your flames away).&lt;/p&gt;
&lt;h5&gt;Our Goal: Authentication System&lt;/h5&gt;
&lt;p&gt;This is kind of funny, but this is our 3rd project that relies on MongoDB, and yet the first one to actually require authentication of some kind.&lt;/p&gt;
&lt;p&gt;Before getting into the options we have to choose from on the ruby library scope, there&amp;#8217;s a point to be made on our decision to use MongoDB as the database of choice:&lt;/p&gt;
&lt;p&gt;We want to :)&lt;/p&gt;
&lt;p&gt;Yeah, i know this is not enough and basically not a really good reason, but considering the fact that the other option we have is to use another relational database just for the user model sounds pretty ugly but with that being said, we might result just back to that.&lt;/p&gt;
&lt;h5&gt;Current state of Authentication gems/plugins in Rails&lt;/h5&gt;
&lt;p&gt;There are several widely used authentication libraries: Authlogic, RestfulAuth and the NiftyGenerators generators, and warden/devise that play around the Rack spaces.&lt;br /&gt;
While trying to use Authlogic and RestfulAuth we came across some serious difficulties due to the fact that those 2 libraries are simply, way over, deep in ActiveRecord.&lt;br /&gt;
We tried some hacking around but when we figured out it ain&amp;#8217;t going to go anywhere anytime soon, we pushed it out to a side project and hopefully some day we&amp;#8217;ll release those libraries with some decent Mongo based support.&lt;/p&gt;
&lt;p&gt;As for warden/devise, they are simple to use and devise even has a MongoMapper extension but since we decided not to use MongoMapper it had zero contribution to our efforts.&lt;br /&gt;
Personally, i am not a fan of Rack based authentication management. Not going too deep in it i&amp;#8217;ll just say that it feels like authentication/registration belongs on another level than on the actual request level (authorization can easily fit right in there on the other hand). On top of that i added some weird feeling when looking into the actual code base that looked rather constricted (yet effective) and the fact that i know some people that are having constant issues with those gems.&lt;/p&gt;
&lt;p&gt;The lone survivor to this library hunting massacre was NiftyGenerators, being really simple and has absolutely no strings attached to the actual &lt;span class=&quot;caps&quot;&gt;ORM&lt;/span&gt; in use, it was chosen to be the base line for our authentication system.&lt;/p&gt;
&lt;p&gt;Yes, we will have to code all those fancy shinies the other libraries magically weld into our code (Activation, confirmation etc. etc.) but it really feels like that something needs to be done with MongoDB on that matter.&lt;/p&gt;
&lt;h4&gt;Setting up MongoId&lt;/h4&gt;
&lt;h5&gt;Install&lt;/h5&gt;
&lt;p&gt;First thing you really want to do is to add &lt;code&gt;mongoid&lt;/code&gt; and maybe the &lt;code&gt;mongo_ext&lt;/code&gt; gems to your &lt;code&gt;gemfile&lt;/code&gt; and after run &lt;code&gt;bundle install&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324100.js?file=gemfile&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;em&gt;Side note:&lt;/em&gt; you should consider specifying a version on your own file, this is just for example.&lt;/p&gt;
&lt;h5&gt;Configuration&lt;/h5&gt;
&lt;p&gt;first, create &lt;code&gt;config/database.mongo.yml&lt;/code&gt;:&lt;br /&gt;
&lt;script src=&quot;http://gist.github.com/324102.js?file=mongoid.yml&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;next, you&amp;#8217;ll need to remove your &lt;code&gt;active_record&lt;/code&gt; framework initialization from &lt;code&gt;config/environment.rb&lt;/code&gt;&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324105.js?file=env.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;strong&gt;DO &lt;span class=&quot;caps&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;REMOVE&lt;/span&gt; database.yml, some plugins still need it there even if you don&amp;#8217;t use it (Cucumber&amp;#8217;s generators for example)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Now add an initializer to load your Mongo environment on &lt;code&gt;config/initializers/mongo.rb&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324106.js?file=mongo.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;&lt;em&gt;Side note:&lt;/em&gt; make sure you are pointing to your own &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; configuration file.&lt;/p&gt;
&lt;h4&gt;Nifty Generators &amp;#8211; Authentication&lt;/h4&gt;
&lt;h5&gt;Make me some skeletons!&lt;/h5&gt;
&lt;p&gt;To generate the user model, sessions and the entire Nifty authentication entities, run:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324109.js?file=gistfile1.txt&quot;&gt;&lt;/script&gt;&lt;p&gt;Some files will be created but the operation will die out with &lt;code&gt;uninitialized constant Rails::Generator::Commands::Base::ActiveRecord&lt;/code&gt;. Yeah, it&amp;#8217;s right, we don&amp;#8217;t have active record around and we are not going to use migrations at all since we use Mongo.&lt;/p&gt;
&lt;p&gt;We need to create our &lt;code&gt;user.rb&lt;/code&gt; manually.&lt;/p&gt;
&lt;h5&gt;Create user.rb manually&lt;/h5&gt;
&lt;p&gt;This is our &lt;code&gt;user.rb&lt;/code&gt; matched to mongoid&amp;#8217;s limitations:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324110.js?file=user.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;2 notes on that model:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;attr_accessible&lt;/strong&gt; &amp;#8211; Mongoid does not support &lt;code&gt;attr_accessible&lt;/code&gt;, we&amp;#8217;ll have to find another way to handle that (that of course, before we patch Mongoid).&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Validations&lt;/strong&gt; &amp;#8211; some validations in the original NiftyGenerators&amp;#8217;s model, have the &lt;code&gt;:on =&amp;gt; :create&lt;/code&gt; option, which Mongoid does not support. That&amp;#8217;s why we added the &lt;code&gt;check_password&lt;/code&gt; custom validator, and we run it only if it&amp;#8217;s a &lt;code&gt;new_record?&lt;/code&gt;. Yeah, another patch will come soon.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;attr_protected for Mongoid::Document&lt;/h5&gt;
&lt;p&gt;So after we found out we can&amp;#8217;t use &lt;code&gt;attr_accessible&lt;/code&gt; with Mongoid, we had to see how can we implement it. Personally, i prefer &lt;code&gt;attr_protected&lt;/code&gt; over &lt;code&gt;attr_accessible&lt;/code&gt; since i always forget to add new fields to the list, which when dealing with mongo it is even easier to forget due to the lack of migrations.&lt;br /&gt;
Futher more, there are usually less fields you want to block than those you actually want to pass so it makes more sense to keep a short list rather than a long list.&lt;/p&gt;
&lt;p&gt;We extended &lt;code&gt;Mongoid::Document&lt;/code&gt; with &lt;code&gt;Mongoid::Document::ProtectedAttributes&lt;/code&gt; to allow the usage of &lt;code&gt;attr_protected&lt;/code&gt; and we created it in &lt;code&gt;lib/mongoid_protected_attributes.rb&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324131.js?file=mongoid_protected_attrs.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;We need to require it in order for it to work so we&amp;#8217;ll add this to our Mongo initializer in &lt;code&gt;config/initializers/mongo.rb&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324133.js?file=mongo.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;Now we simply add this on top of our &lt;code&gt;user.rb&lt;/code&gt;:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324133.js?file=user.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;Yay! now we can haz &lt;code&gt;attr_protected&lt;/code&gt;.&lt;/p&gt;
&lt;h5&gt;End of Part 1&lt;/h5&gt;
&lt;p&gt;By now you should be able to register and log in successfully, you might want to have an &lt;code&gt;application_controller&lt;/code&gt; that has some or all of those methods:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/324138.js?file=application_controller.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;On the next post i&amp;#8217;ll cover our fight to enable confirmation/activation.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Bag O' Links - 4/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-4-3-2010"/>
   <updated>2010-03-04T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-4-3-2010</id>
   <content type="html">&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://ryanbigg.com/2010/03/testing-facebook/&quot;&gt;Testing Facebooker in Rails&lt;/a&gt; &amp;#8211; Facebooker claims another victim, this time it&amp;#8217;s &lt;a href=&quot;http://twitter.com/ryanbigg&quot;&gt;Ryan Bigg&lt;/a&gt; that puts up a hell of a fight.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.cdncatalog.com/&quot;&gt;&lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; Catalog&lt;/a&gt; &amp;#8211; &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; and Javascript &lt;span class=&quot;caps&quot;&gt;CDN&lt;/span&gt; resources.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.alfajango.com/blog/performance-tuning-for-phusion-passenger-an-introduction/&quot;&gt;Performance tuning for Passenger&lt;/a&gt; &amp;#8211; some good tips.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://googlewebmastercentral.blogspot.com/2010/03/googles-seo-report-card.html&quot;&gt;Google&amp;#8217;s &lt;span class=&quot;caps&quot;&gt;SEO&lt;/span&gt; report card&lt;/a&gt; &amp;#8211; an internal document that is supposed to point some good &lt;span class=&quot;caps&quot;&gt;SEO&lt;/span&gt; practices.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://therealadam.com/archive/2010/03/02/a-quick-rvm-rundown/&quot;&gt;Quick &lt;span class=&quot;caps&quot;&gt;RVM&lt;/span&gt; rundown&lt;/a&gt; &amp;#8211; easy tutorial on installing multiple versions of ruby on your machine.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://lunarlogicpolska.com/blog/2010/02/15/mysql-and-mongodb-working-together-in-kanbanery&quot;&gt;MongoDB and MySQL play along with DataMapper&lt;/a&gt; &amp;#8211; this is actually quiet a nice solution.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2010/02/13/the-definitive-guide-to-styling-web-links/&quot;&gt;Designing web links &amp;#8211; a definitive guide&lt;/a&gt; &amp;#8211; a smashing note from SmashingMagazine.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.webdesignerwall.com/trends/47-amazing-css3-animation-demos/#more-455&quot;&gt;Crazy CSS3 stuff&lt;/a&gt; &amp;#8211; seriously impressed.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.slideshare.net/guestdfd1ec/design-patterns-for-distributed-nonrelational-databases&quot;&gt;Design patterns for noSQL databases&lt;/a&gt; &amp;#8211; important read if you are going to use it.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://weblog.jamisbuck.org/2010/3/2/unobtrusive-yet-explicit&quot;&gt;Unobtrusive, yet explicit&lt;/a&gt; &amp;#8211; &lt;span class=&quot;caps&quot;&gt;UJS&lt;/span&gt; in Rails3.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://arstechnica.com/business/data-centers/2010/02/what-second-life-can-teach-all-companies-about-scaling-web-apps.ars/&quot;&gt;What SecondLife can teach you about scaling&lt;/a&gt; &amp;#8211; a lot, and even &lt;a href=&quot;http://www.mvdirona.com/jrh/talksAndPapers/JamesRH_Lisa.pdf&quot;&gt;Microsoft&lt;/a&gt; has some good pointers.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.seriesseed.com/&quot;&gt;SeriesSeed&lt;/a&gt; &amp;#8211; some documents to help you in the process of financing your startup, incorporation and stuff included.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/adzap/validates_timeliness&quot;&gt;validates_timeliness&lt;/a&gt; &amp;#8211; Date and time validation plugin for Rails 2.x and allows custom date/time formats (in case you use a string input too, and not one of the Date/Time selectors).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/keithnorm/Rubex&quot;&gt;Rubex&lt;/a&gt; &amp;#8211; In the past few days &lt;a href=&quot;http://rubular.com&quot;&gt;Rubular&lt;/a&gt; was sick, this is a simple sinatra replica you can use instead.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://erector.rubyforge.org/index.html&quot;&gt;erector&lt;/a&gt; &amp;#8211; Erector is a Builder-like view framework&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/samdanavia/ambitious_query_indexer&quot;&gt;ambitious_query_indexer&lt;/a&gt; &amp;#8211; another attempt to get a hit on database indexes in a Rails application.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://bit.ly/aEw0xP&quot;&gt;seo_checker&lt;/a&gt; &amp;#8211; check your rails apps &lt;span class=&quot;caps&quot;&gt;SEO&lt;/span&gt; grade.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/pivotal/jasmine-ruby&quot;&gt;jasmin-ruby&lt;/a&gt; and &lt;a href=&quot;http://github.com/pivotal/jasmine&quot;&gt;jasmin&lt;/a&gt; &amp;#8211; &lt;span class=&quot;caps&quot;&gt;DOM&lt;/span&gt;-less simple JavaScript testing framework.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Bag O' Links - 1/3/2010</title>
   <link href="http://blog.eizesus.com/2010/03/bag-o-links-1-3-2010"/>
   <updated>2010-03-01T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/03/bag-o-links-1-3-2010</id>
   <content type="html">&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://drnicwilliams.com/2010/02/25/customized-google-forms/&quot;&gt;Customized Google forms with Heroku&lt;/a&gt; &amp;#8211; google say no to themes and fancy stuff? Nic says Aye!&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://gnoted.com/3-hacks-for-firefox-double-internet-browsing-speed/&quot;&gt;3 firefox hacks for some speed&lt;/a&gt; &amp;#8211; nice, but i think the thing you want the most is a 4GB&amp;lt; dev machine.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.robbyonrails.com/articles/2008/12/14/launching-ruby-on-rails-projects-a-checklist&quot;&gt;Launching a Rails Application &amp;#8211; Checklist&lt;/a&gt; &amp;#8211; a rather old entry form PlantArgon but still catches, we should probably post ours too.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.jayfields.com/2010/02/maintainability-of-unit-tests.html&quot;&gt;The maintainability of Unit Tests&lt;/a&gt; &amp;#8211; long runs and test breaking when you refactor your code can simply be a reference to you, doing it wrong. but good points overall.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://szeryf.wordpress.com/2010/03/01/custom-shoulda-macros-a-tutorial/&quot;&gt;Writing shoulda macros&lt;/a&gt; &amp;#8211; a brief tutorial.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://news.ycombinator.com/item?id=1157864&quot;&gt;Command line utilities for Mac OS&lt;/a&gt; &amp;#8211; geeks unleashed.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://agilezen.com/&quot;&gt;AgileZen&lt;/a&gt;? &amp;#8211; might be a nice tool, if i&amp;#8217;ll get overconfused with PT.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://alexyoung.org/2009/10/22/javascript-dsl/&quot;&gt;Fear and loathing in Javascript &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt;&lt;/a&gt; &amp;#8211; love your rubies.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://eloquentjavascript.net/&quot;&gt;Eloquent Javascript&lt;/a&gt; &amp;#8211; a book that aims to teach javascript programming, looks pretty solid with a nice coverage on it.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://jgn.heroku.com/2010/02/28/rapid-prototyping-with-haml-sass-and-ruby/&quot;&gt;Rapid prototyping with &lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt;, &lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; and Ruby&lt;/a&gt; &amp;#8211; argh, i don&amp;#8217;t like either &lt;span class=&quot;caps&quot;&gt;HAML&lt;/span&gt; or &lt;span class=&quot;caps&quot;&gt;SASS&lt;/span&gt; (yeah, i know), but this article does show some nice time saving techniques for those of you that prefer to burn in hell :).&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://rfw.posterous.com/how-nodejs-saved-my-web-application&quot;&gt;How Node.js saved my application&lt;/a&gt; &amp;#8211; a really nice use case on a Rails application.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://rfw.posterous.com/how-nodejs-saved-my-web-application&quot;&gt;Node.js, Redis and resque for scalability&lt;/a&gt; &amp;#8211; a really nice wrap by Paul Gross, design a nice web server with those tools to empower scalability.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://joemaller.com/2008/11/25/a-web-focused-git-workflow&quot;&gt;Web focused git workflow&lt;/a&gt; &amp;#8211; deploy / work / manage simple sites with git.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.igvita.com/2010/03/01/schema-free-mysql-vs-nosql/&quot;&gt;Schema-free mySQL vs. NoSQL&lt;/a&gt; &amp;#8211; Igvita with another one of his &amp;#8220;print-and-get-it-gold-framed-asap&amp;#8221; posts, this dude is simply one of the best.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.viget.com/inspire/practical-uses-of-css3/&quot;&gt;Practical examples of CSS3&lt;/a&gt; &amp;#8211; enough with round corners already!&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://blog.boxedice.com/2010/02/28/notes-from-a-production-mongodb-deployment/&quot;&gt;Deploying MongoDB in production&lt;/a&gt; &amp;#8211; Some important notes from BoxedIce&amp;#8217;s experience.. some very disappointing limitations on Mongo there.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://agiletesting.blogspot.com/2010/02/use-haproxy-14-if-you-need-mysql-health.html&quot;&gt;HAProxy 1.4&lt;/a&gt; &amp;#8211; the awesome load balancer is now with mysql health checks.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://sebastians-pamphlets.com/smart-robots-txt/&quot;&gt;A smart robots.txt&lt;/a&gt; &amp;#8211; get yourself a shiny new robots.txt&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://iampaddy.com/lifebelow600/&quot;&gt;Under 600px, a different &amp;#8216;fold&amp;#8217; perspective&lt;/a&gt; &amp;#8211; a neat perspective about layout design.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://saasinterrupted.com/2010/02/24/high-availability-principle-request-queueing/&quot;&gt;High availability principle: request queuing&lt;/a&gt; &amp;#8211; a good brief explanation and some others are there too.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Treasures&lt;/h4&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href=&quot;http://dev.openlayers.org/releases/OpenLayers-2.8/doc/apidocs/files/OpenLayers-js.html&quot;&gt;OpenLayers&lt;/a&gt; &amp;#8211; or the &lt;a href=&quot;http://dev.openlayers.org/&quot;&gt;main page&lt;/a&gt;, a javascript mapping &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;, looks promising but as always almost, documentation sucks.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.snippetstash.com/&quot;&gt;SnippetStash&lt;/a&gt; &amp;#8211; another charm by &lt;a href=&quot;http://twitter.com/bphogan&quot;&gt;bphogan&lt;/a&gt;, this time it&amp;#8217;s a convenient tool to keep snippets around. beats gist since you can write a more visible descriptive text.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/jnunemaker/canable/&quot;&gt;Canable&lt;/a&gt; &amp;#8211; simple permission system for rails.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/develon/authlogic_generator&quot;&gt;AuthlogicGenerator&lt;/a&gt; &amp;#8211; Generate a complete Authlogic stack with authentication, activation and password reset.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/napcs/960static&quot;&gt;960static&lt;/a&gt; &amp;#8211; generate static websites with 960.gs and StaticMatic.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/defunkt/gist&quot;&gt;Command line gists&lt;/a&gt; &amp;#8211; i didn&amp;#8217;t know it&amp;#8217;s out there.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.bennadel.com/projects/cormvc-jquery-framework.htm&quot;&gt;CorMVC &amp;#8211; jQuery &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; framework&lt;/a&gt; &amp;#8211; it&amp;#8217;s been a while since i started looking for some javascript &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; resources, this might be reasonable.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/bebanjo/delorean&quot;&gt;Delorean&lt;/a&gt; &amp;#8211; a space/time continuum abuser in ruby.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://github.com/ahoward/main&quot;&gt;Main&lt;/a&gt; &amp;#8211; a class factory and dsl for generating command line programs real quick.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Using Sinatra to test remote services in Rails</title>
   <link href="http://blog.eizesus.com/2010/02/using_sintara_to_test_remote_services_in_rails-27-2-2010"/>
   <updated>2010-02-27T00:00:00-05:00</updated>
   <id>http://gitready.com/2010/02/using_sintara_to_test_remote_services_in_rails-27-2-2010</id>
   <content type="html">&lt;p&gt;A few weeks ago i was chatting with &lt;a href=&quot;http://www.ryanbigg.com&quot;&gt;Ryan Bigg&lt;/a&gt; about one of his projects, and he was contemplating about the fact he couldn&amp;#8217;t find a decent way to test a remote &lt;span class=&quot;caps&quot;&gt;XMLRPC&lt;/span&gt; service handling in that application.&lt;/p&gt;
&lt;p&gt;Testing remote service calls like a boss is achieved by using &lt;a href=&quot;http://rubygems.org/gems/fakeweb&quot;&gt;FakeWeb&lt;/a&gt; which is pretty awesome when you work in front of a &lt;span class=&quot;caps&quot;&gt;REST&lt;/span&gt; web service of something like that, but it does have a really big -1 on it: It binds a mocked response to a &lt;strong&gt;specific url&lt;/strong&gt;, and you can&amp;#8217;t add more responses for that url based on parameters.&lt;br /&gt;
Meaning, basically, that if you want for example to test a web service that requires &lt;span class=&quot;caps&quot;&gt;POST&lt;/span&gt; requests to a specific url, FakeWeb just won&amp;#8217;t cut it.&lt;/p&gt;
&lt;p&gt;So basically, Ryan suggested an idea that seemed nice at the moment: add a Rails metal Rack app to handle those requests.&lt;/p&gt;
&lt;p&gt;Awesome idea, but a few setbacks:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;If you don&amp;#8217;t want that application to run on other environments, you&amp;#8217;ll have to scope the behavior to the &lt;em&gt;test&lt;/em&gt; environment only, simple? yeah. but personally i don&amp;#8217;t like having &lt;code&gt;if Rails.env == &quot;test&quot;&lt;/code&gt; in my code.&lt;/li&gt;
	&lt;li&gt;Since we are trying to mock a webservice, we&amp;#8217;ll have to add different handlers in that metal application which can lead to a long, ugly, conditional and eye-ripping unmaintainable code.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So there I thought, why not just initiate a Sinatra application as part of your tests, and easily manage that sinatra as the mocked web service? &lt;span class=&quot;caps&quot;&gt;WIN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;I created the &lt;a href=&quot;http://rubygems.org/gems/sinatra_fake_webservice&quot;&gt;SinatraFakeWebService&lt;/a&gt; gem that provides a simple interface to instantiate that Sinatra application and to manage the mocked webservice interface.&lt;/p&gt;
&lt;h4&gt;Installation&lt;/h4&gt;
&lt;p&gt;Install the gem:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo gem install sinatra_fake_webservice&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you use bundler or such:&lt;br /&gt;
&lt;code&gt;gem 'sinatra_fake_webservice', :group =&amp;gt; 'test'&lt;/code&gt; &lt;br /&gt;
should do it.&lt;/p&gt;
&lt;h4&gt;Usage&lt;/h4&gt;
&lt;p&gt;In your &lt;code&gt;test_helper.rb&lt;/code&gt; or the Cucumber/rSpec equivalent:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/317143.js?file=test_helper.rb&quot;&gt;&lt;/script&gt;&lt;p&gt;and tests:&lt;/p&gt;
&lt;script src=&quot;http://gist.github.com/317143.js?file=test_webservice.rb&quot;&gt;&lt;/script&gt;&lt;h4&gt;todos&lt;/h4&gt;
&lt;p&gt;If this would be proven as useful, i&amp;#8217;ll probably add a better &lt;span class=&quot;caps&quot;&gt;DSL&lt;/span&gt; for the interaction other than the ugly &lt;em&gt;Net::&lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;&lt;/em&gt; all over.&lt;/p&gt;</content>
 </entry>
 
 
</feed>